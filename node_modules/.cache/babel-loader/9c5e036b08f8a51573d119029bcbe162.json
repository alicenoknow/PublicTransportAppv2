{"ast":null,"code":"const _excluded = [\"value\", \"formatter\", \"editing\", \"editFormat\", \"displayFormat\", \"localizer\", \"parse\", \"onChange\", \"onBlur\", \"disabled\", \"readOnly\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useMemo, useRef, useState } from 'react';\nimport { isNullOrInvalid } from './dates';\nimport Input from './Input';\nconst DatePickerInput = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    value,\n    formatter,\n    editing,\n    editFormat,\n    displayFormat,\n    localizer,\n    parse,\n    onChange,\n    onBlur,\n    disabled,\n    readOnly\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const needsFlush = useRef(false);\n  const nextTextValue = useMemo(() => value instanceof Date && isValid(value) ? localizer.formatDate(value, formatter, editing ? editFormat : displayFormat) : '', [value, formatter, localizer, displayFormat, editing, editFormat]);\n  const [prevValue, setPrevValue] = useState(nextTextValue);\n  const [textValue, setTextValue] = useState(nextTextValue);\n\n  if (prevValue !== nextTextValue) {\n    setPrevValue(nextTextValue);\n    setTextValue(nextTextValue);\n  }\n\n  const handleBlur = event => {\n    if (onBlur) onBlur(event);\n\n    if (needsFlush.current) {\n      let date = parse(event.target.value);\n      const dateIsInvalid = event.target.value != '' && isNullOrInvalid(date);\n\n      if (dateIsInvalid) {\n        setTextValue('');\n      }\n\n      needsFlush.current = false;\n      onChange(date, event.target.value);\n    }\n  };\n\n  const handleChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    needsFlush.current = true;\n    setTextValue(target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(Input, _extends({}, props, {\n    type: \"text\",\n    ref: ref,\n    className: \"rw-widget-input\",\n    value: textValue,\n    disabled: disabled,\n    readOnly: readOnly,\n    onChange: handleChange,\n    onBlur: handleBlur\n  }));\n});\nDatePickerInput.displayName = 'DatePickerInput';\nexport default DatePickerInput;\n\nfunction isValid(d) {\n  return !isNaN(d.getTime());\n}","map":null,"metadata":{},"sourceType":"module"}
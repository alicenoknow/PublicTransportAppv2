{"ast":null,"code":"const _excluded = [\"focusedItem\", \"disabled\", \"onChange\", \"value\", \"localizer\", \"min\", \"max\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useMemo } from 'react';\nimport CalendarView from './CalendarView';\nimport { chunk } from './_';\nimport dates from './dates';\n\nfunction DecadeView(_ref) {\n  let {\n    focusedItem,\n    disabled,\n    onChange,\n    value,\n    localizer,\n    min,\n    max\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const chunks = useMemo(() => chunk(getDecadeYears(focusedItem), 4), [focusedItem]);\n  return /*#__PURE__*/React.createElement(CalendarView, _extends({}, props, {\n    focusedItem: focusedItem\n  }), /*#__PURE__*/React.createElement(CalendarView.Body, null, chunks.map((row, rowIdx) => /*#__PURE__*/React.createElement(CalendarView.Row, {\n    key: rowIdx\n  }, row.map((date, colIdx) => {\n    let label = localizer.formatDate(date, 'year');\n    return /*#__PURE__*/React.createElement(CalendarView.Cell, {\n      key: colIdx,\n      unit: \"year\",\n      viewUnit: \"decade\",\n      label: label,\n      date: date,\n      min: min,\n      max: max,\n      onChange: onChange,\n      focusedItem: focusedItem,\n      selected: value,\n      disabled: disabled\n    }, label);\n  })))));\n}\n\nfunction getDecadeYears(_date) {\n  let days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let date = dates.add(dates.startOf(_date, 'decade'), -2, 'year');\n  return days.map(() => date = dates.add(date, 1, 'year'));\n}\n\nexport default DecadeView;","map":null,"metadata":{},"sourceType":"module"}
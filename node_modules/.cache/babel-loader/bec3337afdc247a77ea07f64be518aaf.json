{"ast":null,"code":"import { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(files, loaders, options, context) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = null;\n  }\n\n  const fetch = getFetchFunction(options || {});\n\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  const promises = files.map(file => loadOneFileInBatches(file, loaders, options, fetch));\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n\n  return await parseInBatches(file, loaders, options);\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getImageSize } from '../category-api/parsed-image-api';\nconst {\n  _encodeImageNode\n} = globalThis;\nexport async function encodeImage(image, options) {\n  options = options || {};\n  options.image = options.image || {};\n  return _encodeImageNode ? _encodeImageNode(image, {\n    type: options.image.mimeType\n  }) : encodeImageInBrowser(image, options);\n}\nlet qualityParamSupported = true;\n\nasync function encodeImageInBrowser(image, options) {\n  const {\n    mimeType,\n    jpegQuality\n  } = options.image;\n  const {\n    width,\n    height\n  } = getImageSize(image);\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  drawImageToCanvas(image, canvas);\n  const blob = await new Promise(resolve => {\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas) {\n  let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n\n    if (context) {\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  const context = canvas.getContext('2d');\n\n  if (image.data) {\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  context.drawImage(image, 0, 0);\n  return canvas;\n}","map":null,"metadata":{},"sourceType":"module"}
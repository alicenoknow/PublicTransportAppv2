{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport createStyles from './RefreshControl.styles';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Arrow from './Arrow';\nimport Loading from './Loading';\nimport RefreshControlObserver from './RefreshControlObserver';\n\nvar RefreshControl = function (_Component) {\n  _inherits(RefreshControl, _Component);\n\n  function RefreshControl() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, RefreshControl);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RefreshControl.__proto__ || Object.getPrototypeOf(RefreshControl)).call.apply(_ref, [this].concat(args))), _this), _this.styles = createStyles(), _this.saveRef = function (refreshControl) {\n      _this.refreshControl = refreshControl;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(RefreshControl, [{\n    key: 'requestRefresh',\n    value: function requestRefresh() {\n      var refreshControl = this.refreshControl;\n      refreshControl && refreshControl.requestRefresh();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          color = _props.color,\n          other = _objectWithoutProperties(_props, ['color']),\n          styles = this.styles;\n\n      return React.createElement(RefreshControlObserver, _extends({}, other, {\n        ref: this.saveRef\n      }), function (_ref2) {\n        var isRefreshing = _ref2.isRefreshing,\n            isActive = _ref2.isActive;\n        return React.createElement('div', {\n          style: styles.iconContainer\n        }, isRefreshing ? React.createElement(Loading, {\n          color: color\n        }) : React.createElement(Arrow, {\n          color: color,\n          style: styles.arrowIcon(isActive)\n        }));\n      });\n    }\n  }]);\n\n  return RefreshControl;\n}(Component);\n\nRefreshControl.propTypes = {\n  isRefreshing: PropTypes.bool.isRequired,\n  onRefresh: PropTypes.func,\n  color: PropTypes.string,\n  style: PropTypes.object\n};\nRefreshControl.defaultProps = {\n  color: '#333'\n};\nexport default RefreshControl;","map":null,"metadata":{},"sourceType":"module"}
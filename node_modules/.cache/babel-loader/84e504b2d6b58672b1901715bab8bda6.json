{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useEventListener from '@restart/hooks/useEventListener';\nconst defaultSelector = ['input', 'textarea', 'select', 'button:not([tabindex=\"-1\"])', '[tabindex=\"0\"]'].join(',');\n\nconst getDocument = () => document;\n\nexport default function useTabTrap(ref) {\n  let selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSelector;\n  const startedRef = useRef(false);\n  useEventListener(getDocument, 'keydown', event => {\n    if (!startedRef.current || !ref.current || event.key !== 'Tab') {\n      return;\n    }\n\n    const tabbables = ref.current.querySelectorAll(selector);\n\n    if (event.shiftKey && event.target === tabbables[0]) {\n      tabbables[tabbables.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && event.target === tabbables[tabbables.length - 1] || !ref.current.contains(event.target)) {\n      tabbables[0].focus();\n      event.preventDefault();\n    }\n  });\n  return useMemo(() => ({\n    focus() {\n      const tabbables = ref.current.querySelectorAll(selector);\n      const first = tabbables[0];\n      if (first) first.focus();\n    },\n\n    start() {\n      startedRef.current = true;\n    },\n\n    stop() {\n      startedRef.current = false;\n    }\n\n  }), [ref, selector]);\n}","map":null,"metadata":{},"sourceType":"module"}
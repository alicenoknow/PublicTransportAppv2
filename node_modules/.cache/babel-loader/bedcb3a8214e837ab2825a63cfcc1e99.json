{"ast":null,"code":"import { assert } from '../utils/assert';\nexport function getKeyValue(gl, name) {\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  const number = Number(name);\n\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\nexport function getKey(gl, value) {\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n\n  return String(value);\n}\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n\n  return String(value);\n}","map":null,"metadata":{},"sourceType":"module"}
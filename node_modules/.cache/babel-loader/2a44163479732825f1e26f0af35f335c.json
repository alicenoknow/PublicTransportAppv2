{"ast":null,"code":"const isObject = value => value && typeof value === 'object';\n\nexport async function asyncDeepMap(tree, func) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return await mapSubtree(tree, func, options);\n}\nexport async function mapSubtree(object, func, options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object, func, options);\n  }\n\n  const url = object;\n  return await func(url, options);\n}\n\nasync function mapObject(object, func, options) {\n  const promises = [];\n  const values = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then(value => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n  return values;\n}\n\nasync function mapArray(urlArray, func) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const promises = urlArray.map(url => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}","map":null,"metadata":{},"sourceType":"module"}
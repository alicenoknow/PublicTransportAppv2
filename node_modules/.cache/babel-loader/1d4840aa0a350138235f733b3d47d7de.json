{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport createStyles from './RefreshControlObserver.styles';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { RefreshContext } from '../Contexts';\nimport { PullThreshold } from '../constants';\n\nvar RefreshControlObserver = function (_Component) {\n  _inherits(RefreshControlObserver, _Component);\n\n  function RefreshControlObserver() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, RefreshControlObserver);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RefreshControlObserver.__proto__ || Object.getPrototypeOf(RefreshControlObserver)).call.apply(_ref, [this].concat(args))), _this), _this.styles = createStyles(), _this.state = {\n      isActive: false\n    }, _this.domRef = function (dom) {\n      _this.dom = dom;\n    }, _this.renderChildren = function (refreshState) {\n      if (!_this.refreshState) {\n        _this.refreshState = refreshState;\n        refreshState.mount(_this);\n      }\n\n      var _this2 = _this,\n          _this2$props = _this2.props,\n          children = _this2$props.children,\n          style = _this2$props.style,\n          isRefreshing = _this2$props.isRefreshing,\n          onRefresh = _this2$props.onRefresh,\n          other = _objectWithoutProperties(_this2$props, ['children', 'style', 'isRefreshing', 'onRefresh']),\n          isActive = _this2.state.isActive,\n          styles = _this2.styles;\n\n      return React.createElement('div', _extends({}, other, {\n        style: styles.container(style, isRefreshing),\n        ref: _this.domRef\n      }), children({\n        isRefreshing: isRefreshing,\n        isActive: isActive\n      }));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(RefreshControlObserver, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.isRefreshing && this.props.isRefreshing) {\n        this.enableTransition();\n        this.setHeight(PullThreshold);\n      } else if (prevProps.isRefreshing && !this.props.isRefreshing) {\n        this.end();\n        this.setHeight(0);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.refreshState.unmount();\n    }\n  }, {\n    key: 'requestRefresh',\n    value: function requestRefresh() {\n      var onRefresh = this.props.onRefresh;\n      onRefresh && onRefresh();\n    }\n  }, {\n    key: 'setHeight',\n    value: function setHeight(val) {\n      var max = PullThreshold;\n      var height = val > 0 ? val > max ? max + (val - max) / 2 : val : 0;\n      var isActive = this.state.isActive,\n          dom = this.dom;\n      dom.style.height = height + 'px';\n\n      if (height >= max && !isActive) {\n        this.setState({\n          isActive: true\n        });\n      } else if (height < max && isActive) {\n        this.setState({\n          isActive: false\n        });\n      }\n    }\n  }, {\n    key: 'enableTransition',\n    value: function enableTransition() {\n      this.dom.style.transition = 'height 0.3s ease-out, min-height 0.3s ease-out';\n    }\n  }, {\n    key: 'disableTransition',\n    value: function disableTransition() {\n      this.dom.style.transition = 'none';\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      if (this.state.isActive) {\n        this.enableTransition();\n        this.setState({\n          isActive: false\n        });\n      }\n    }\n  }, {\n    key: 'attemptToRefresh',\n    value: function attemptToRefresh() {\n      var _props = this.props,\n          onRefresh = _props.onRefresh,\n          isRefreshing = _props.isRefreshing,\n          isActive = this.state.isActive;\n\n      if (onRefresh && !isRefreshing && isActive) {\n        onRefresh();\n      }\n\n      this.end();\n\n      if (isRefreshing) {\n        this.setHeight(PullThreshold);\n      } else {\n        this.setHeight(0);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(RefreshContext.Consumer, null, this.renderChildren);\n    }\n  }]);\n\n  return RefreshControlObserver;\n}(Component);\n\nRefreshControlObserver.propTypes = {\n  isRefreshing: PropTypes.bool.isRequired,\n  onRefresh: PropTypes.func,\n  style: PropTypes.object,\n  children: PropTypes.func.isRequired\n};\nexport default RefreshControlObserver;","map":null,"metadata":{},"sourceType":"module"}
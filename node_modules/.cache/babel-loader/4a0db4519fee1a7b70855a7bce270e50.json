{"ast":null,"code":"import Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds, getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from 'math.gl';\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n      repeat = false,\n      worldOffset = 0,\n      legacyMeterSizes = false\n    } = opts;\n    let {\n      width,\n      height,\n      altitude = 1.5\n    } = opts;\n    const scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    let fovy;\n    let projectionParameters = null;\n\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({ ...opts,\n      width,\n      height,\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.orthographic = orthographic;\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(this);\n  }\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      const bounds = this.getBounds();\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x ? new WebMercatorViewport({ ...this,\n          worldOffset: x\n        }) : this;\n\n        this._subViewports.push(offsetViewport);\n      }\n    }\n\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.projectPosition(xyz);\n    }\n\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.unprojectPosition(xyz);\n    }\n\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {\n      longitude,\n      latitude\n    };\n  }\n\n  getBounds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const corners = getBounds(this, options.z || 0);\n    return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n  }\n\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds({\n      width,\n      height,\n      bounds,\n      ...options\n    });\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n\n}\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":null,"metadata":{},"sourceType":"module"}
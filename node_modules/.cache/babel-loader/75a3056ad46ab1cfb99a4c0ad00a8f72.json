{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EntryState = function () {\n  function EntryState(entry, debugId) {\n    _classCallCheck(this, EntryState);\n\n    this.entry = entry;\n    this.debugId = debugId;\n  }\n\n  _createClass(EntryState, [{\n    key: \"isOffsetTop\",\n    get: function get() {\n      var entry = this.entry;\n      return !entry.isIntersecting && entry.boundingClientRect.bottom < entry.rootBounds.bottom;\n    }\n  }, {\n    key: \"isOffsetBottom\",\n    get: function get() {\n      var entry = this.entry;\n      return !entry.isIntersecting && entry.boundingClientRect.bottom > entry.rootBounds.bottom;\n    }\n  }, {\n    key: \"isTopVisible\",\n    get: function get() {\n      var entry = this.entry;\n      return entry.isIntersecting && entry.boundingClientRect.top >= entry.rootBounds.top;\n    }\n  }, {\n    key: \"isBottomVisible\",\n    get: function get() {\n      var entry = this.entry;\n      return entry.isIntersecting && entry.boundingClientRect.bottom <= entry.rootBounds.bottom;\n    }\n  }, {\n    key: \"isTopBoundary\",\n    get: function get() {\n      var entry = this.entry;\n      return entry.isIntersecting && entry.boundingClientRect.top === entry.rootBounds.top;\n    }\n  }, {\n    key: \"isBottomBoundary\",\n    get: function get() {\n      var entry = this.entry;\n      return entry.isIntersecting && entry.boundingClientRect.bottom === entry.rootBounds.bottom;\n    }\n  }]);\n\n  return EntryState;\n}();\n\nexport default EntryState;","map":null,"metadata":{},"sourceType":"module"}
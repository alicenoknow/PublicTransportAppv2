{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport parseImage from '../parsers/parse-image';\nimport { getImageSize } from '../category-api/parsed-image-api';\nimport { generateUrl } from './generate-url';\nimport { deepLoad, shallowLoad } from './deep-load';\nexport async function loadImage(getUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\nexport async function getImageUrls(getUrl, options) {\n  let urlOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const mipLevels = options && options.image && options.image.mipLevels || 0;\n  return mipLevels !== 0 ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {\n  const urls = [];\n\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, { ...urlOptions,\n      lod: 0\n    });\n    const image = await shallowLoad(url, parseImage, options);\n    const {\n      width,\n      height\n    } = getImageSize(image);\n    mipLevels = getMipLevels({\n      width,\n      height\n    });\n    urls.push(url);\n  }\n\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, { ...urlOptions,\n      lod: mipLevel\n    });\n    urls.push(url);\n  }\n\n  return urls;\n}\n\nexport function getMipLevels(_ref) {\n  let {\n    width,\n    height\n  } = _ref;\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}","map":null,"metadata":{},"sourceType":"module"}
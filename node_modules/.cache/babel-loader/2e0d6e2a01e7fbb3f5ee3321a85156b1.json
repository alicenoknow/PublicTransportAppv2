{"ast":null,"code":"/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport warning from 'tiny-warning';\nexport function toItemArray(a) {\n  if (Array.isArray(a)) return a;\n  return [];\n}\nexport const makeArray = function (obj) {\n  let excludeNull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const result = [];\n  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);\n};\nexport const has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;\nexport function chunk(array, chunkSize) {\n  let index = 0;\n  let length = array ? array.length : 0;\n  let result = [];\n  chunkSize = Math.max(+chunkSize || 1, 1);\n\n  while (index < length) result.push(array.slice(index, index += chunkSize));\n\n  return result;\n}\nexport function groupBySortedKeys(groupBy, data) {\n  let _keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  const iter = typeof groupBy === 'function' ? groupBy : item => item[groupBy];\n  warning(typeof groupBy !== 'string' || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a ` + `property \\`${groupBy}\\` that doesn't exist in the dataset items, this may be a typo`);\n  const groups = new Map();\n  data.forEach(item => {\n    let group = iter(item);\n    if (groups.has(group)) groups.get(group).push(item);else groups.set(group, [item]);\n  });\n  return Array.from(groups);\n}","map":null,"metadata":{},"sourceType":"module"}
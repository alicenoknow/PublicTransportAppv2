{"ast":null,"code":"import { useState } from 'react';\nimport useFocusManagerBase from '@restart/hooks/useFocusManager';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useMounted from '@restart/hooks/useMounted';\nimport matches from 'dom-helpers/matches';\n\nconst isInDisabledFieldset = node => {\n  return !!node && matches(node, 'fieldset[disabled] *');\n};\n\nexport default function useFocusManager(ref) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const isMounted = useMounted();\n  const [focused, setFocus] = useState(false);\n  const isDisabled = useEventCallback(() => props.disabled === true || isInDisabledFieldset(ref.current));\n  const events = useFocusManagerBase(Object.assign({}, opts, {\n    isDisabled,\n    onChange: focused => {\n      if (isMounted()) setFocus(focused);\n    },\n\n    didHandle(focused, event) {\n      let handler = props[focused ? 'onFocus' : 'onBlur'];\n      if (handler) handler(event); // @ts-ignore used by work\n\n      if (opts.didHandle && !event.isWidgetDefaultPrevented) opts.didHandle(focused, event);\n    }\n\n  }));\n  return [events, focused, setFocus];\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useContext, useMemo } from 'react';\nimport * as IntlLocalizers from './IntlLocalizer';\nimport { getMessages } from './messages';\n\nfunction mergeWithDefaults(date, number, messages) {\n  let formatOverrides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (!date && !number) throw new Error('This component requires a Localizer but none was provided');\n  return {\n    formatOverrides,\n    messages: getMessages(messages),\n\n    formatDate(value, format, userFormat) {\n      return date[format](value, userFormat != null ? userFormat : this.formatOverrides[format]);\n    },\n\n    formatNumber(value, userFormat) {\n      return number.format(value, userFormat != null ? userFormat : this.formatOverrides.number);\n    },\n\n    parseDate: date.parse.bind(date),\n    parseNumber: number.parse.bind(number),\n    decimalCharacter: number.decimalCharacter.bind(number),\n    firstOfWeek: date.firstOfWeek.bind(date)\n  };\n}\n\nconst LocalizerContext = /*#__PURE__*/React.createContext(mergeWithDefaults(new IntlLocalizers.DateLocalizer(), new IntlLocalizers.NumberLocalizer()));\n\nconst Localization = _ref => {\n  let {\n    date: _date = new IntlLocalizers.DateLocalizer(),\n    number: _number = new IntlLocalizers.NumberLocalizer(),\n    messages,\n    children\n  } = _ref;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const localizer = useMemo(() => mergeWithDefaults(_date, _number, messages), [_date, _number, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(messages)]);\n  return /*#__PURE__*/React.createElement(LocalizerContext.Provider, {\n    value: localizer\n  }, children);\n};\n\nexport const useLocalizer = (messages, formats) => {\n  const localizer = useContext(LocalizerContext);\n  return useMemo(() => {\n    if (!messages && !formats) return localizer;\n    return Object.assign({}, localizer, {\n      messages: getMessages(Object.assign({}, localizer.messages, messages)),\n      formatOverrides: Object.assign({}, localizer.formatOverrides, formats)\n    });\n  }, [messages, formats, localizer]);\n};\nLocalization.useLocalizer = useLocalizer;\nexport default Localization;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar FixedState = function () {\n  function FixedState() {\n    _classCallCheck(this, FixedState);\n\n    this.children = [];\n  }\n\n  _createClass(FixedState, [{\n    key: \"bind\",\n    value: function bind(reactInstance) {\n      if (!this.forceUpdate) {\n        this.forceUpdate = reactInstance.forceUpdate.bind(reactInstance);\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      this.forceUpdate = null;\n    }\n  }, {\n    key: \"_findIndexByKey\",\n    value: function _findIndexByKey(key) {\n      var children = this.children;\n      var length = children.length;\n      var index = -1;\n\n      for (var i = 0; i < length; i++) {\n        var curr = children[i];\n\n        if (curr && curr.key === key) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount(key) {\n      var index = this._findIndexByKey(key);\n\n      if (index > -1) {\n        this.children.splice(index, 1);\n        this.forceUpdate && this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(child) {\n      var children = this.children;\n      var key = child.key;\n\n      var index = this._findIndexByKey(key);\n\n      if (index > -1) children.splice(index, 1, child);else children.push(child);\n      this.forceUpdate && this.forceUpdate();\n    }\n  }]);\n\n  return FixedState;\n}();\n\nexport default FixedState;","map":null,"metadata":{},"sourceType":"module"}
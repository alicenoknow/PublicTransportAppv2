{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { FixedContext } from '../Contexts';\nimport { createId } from '../util';\n\nvar Fixed = function (_Component) {\n  _inherits(Fixed, _Component);\n\n  function Fixed(props) {\n    _classCallCheck(this, Fixed);\n\n    var _this = _possibleConstructorReturn(this, (Fixed.__proto__ || Object.getPrototypeOf(Fixed)).call(this, props));\n\n    _this.renderChildren = function (fixedContext) {\n      _this.fixedContext = fixedContext;\n      return null;\n    };\n\n    _this.fixedId = createId();\n    return _this;\n  }\n\n  _createClass(Fixed, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.renderInContext();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(_ref) {\n      var children = _ref.children;\n\n      if (children !== this.props.children) {\n        this.renderInContext();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.fixedContext.unmount(this.fixedId);\n    }\n  }, {\n    key: 'renderInContext',\n    value: function renderInContext() {\n      var fixedContext = this.fixedContext,\n          fixedId = this.fixedId,\n          children = this.props.children;\n\n      if (fixedContext.render) {\n        fixedContext.render(cloneElement(Children.only(children), {\n          key: fixedId\n        }));\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(FixedContext.Consumer, null, this.renderChildren);\n    }\n  }]);\n\n  return Fixed;\n}(Component);\n\nFixed.propTypes = {\n  children: PropTypes.node\n};\nexport default Fixed;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { clamp } from 'math.gl';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom(_ref) {\n    let {\n      scale,\n      startZoom\n    } = _ref;\n    const {\n      maxZoom,\n      minZoom\n    } = this._viewportProps;\n\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
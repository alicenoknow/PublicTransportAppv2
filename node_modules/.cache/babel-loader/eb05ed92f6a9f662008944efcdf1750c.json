{"ast":null,"code":"import * as fs from '../node/fs';\nexport default class NodeFileSystem {\n  constructor(options) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir() {\n    let dirname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.';\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path, options) {\n    const info = await fs.stat(path, options);\n    return {\n      size: Number(info.size),\n      isDirectory: () => false,\n      info\n    };\n  }\n\n  async fetch(path, options) {\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  async open(path, flags, mode) {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd) {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd) {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(fd, _ref) {\n    let {\n      buffer = null,\n      offset = 0,\n      length = buffer.byteLength,\n      position = null\n    } = _ref;\n    let totalBytesRead = 0;\n\n    while (totalBytesRead < length) {\n      const {\n        bytesRead\n      } = await fs.read(fd, buffer, offset + totalBytesRead, length - totalBytesRead, position + totalBytesRead);\n      totalBytesRead += bytesRead;\n    }\n\n    return {\n      bytesRead: totalBytesRead,\n      buffer\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
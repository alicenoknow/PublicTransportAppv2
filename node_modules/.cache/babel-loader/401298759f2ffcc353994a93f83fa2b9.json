{"ast":null,"code":"export default async function fetchProgress(response, onProgress) {\n  let onDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let onError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};\n  response = await response;\n\n  if (!response.ok) {\n    return response;\n  }\n\n  const body = response.body;\n\n  if (!body) {\n    return response;\n  }\n\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength && parseInt(contentLength);\n\n  if (!(contentLength > 0)) {\n    return response;\n  }\n\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n\n  });\n  return new Response(progressStream);\n}\n\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {\n      done,\n      value\n    } = await reader.read();\n\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n\n    loadedBytes += value.byteLength;\n    const percent = Math.round(loadedBytes / totalBytes * 100);\n    onProgress(percent, {\n      loadedBytes,\n      totalBytes\n    });\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
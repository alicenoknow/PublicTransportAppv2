{"ast":null,"code":"import { getTransferList } from '../worker-utils/get-transfer-list';\nconst onMessageWrapperMap = new Map();\nexport default class WorkerBody {\n  static set onmessage(onMessage) {\n    self.onmessage = message => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      const {\n        type,\n        payload\n      } = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        const {\n          type,\n          payload\n        } = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  static postMessage(type, payload) {\n    if (self) {\n      const data = {\n        source: 'loaders.gl',\n        type,\n        payload\n      };\n      const transferList = getTransferList(payload);\n      self.postMessage(data, transferList);\n    }\n  }\n\n}\n\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":null,"metadata":{},"sourceType":"module"}
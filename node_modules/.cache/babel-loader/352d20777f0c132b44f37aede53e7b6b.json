{"ast":null,"code":"import WorkerFarm from '../worker-farm/worker-farm';\nimport { removeNontransferableOptions } from '../worker-utils/remove-nontransferable-options';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport async function processOnWorker(worker, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName, onMessage.bind(null, context));\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n\n      break;\n\n    default:\n      console.warn(\"process-on-worker: unknown message \".concat(type));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
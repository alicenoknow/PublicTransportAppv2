{"ast":null,"code":"const _excluded = [\"className\", \"tabIndex\", \"focused\", \"open\", \"dropUp\", \"disabled\", \"readOnly\", \"autofilling\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cn from 'classnames';\nimport React, { useState } from 'react';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\n\nfunction useKeyboardNavigationCheck() {\n  const [isNavigatingViaKeyboard, setIsNavigatingViaKeyboard] = useState(false);\n  useGlobalListener('keydown', _ref2 => {\n    let {\n      key\n    } = _ref2;\n\n    if (key == ' ' || key === 'Tab' || key == 'Enter' || key && key.indexOf('Arrow') !== -1) {\n      setIsNavigatingViaKeyboard(true);\n    }\n  }); // TODO: use pointerdown\n\n  useGlobalListener('mousedown', () => {\n    setIsNavigatingViaKeyboard(false);\n  });\n  return isNavigatingViaKeyboard;\n}\n\nexport function useWidgetProps(props) {\n  const tabIndex = props.tabIndex != null ? props.tabIndex : -1;\n  const isKeyboardNavigating = useKeyboardNavigationCheck();\n  return {\n    tabIndex: tabIndex,\n    'data-intent': isKeyboardNavigating ? 'keyboard' : 'mouse',\n    className: cn(props.className, 'rw-widget', props.disabled && 'rw-state-disabled', props.readOnly && 'rw-state-readonly', props.focused && 'rw-state-focus', props.autofilling && 'rw-webkit-autofill', props.open && `rw-open${props.dropUp ? '-up' : ''}`)\n  };\n}\nconst Widget = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    className,\n    tabIndex,\n    focused,\n    open,\n    dropUp,\n    disabled,\n    readOnly,\n    autofilling\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const widgetProps = useWidgetProps({\n    className,\n    tabIndex,\n    focused,\n    open,\n    dropUp,\n    disabled,\n    readOnly,\n    autofilling\n  });\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, widgetProps));\n});\nWidget.displayName = 'Widget';\nexport default Widget;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const BUS_STOPS_URL = 'https://4dd3-149-156-124-16.ngrok.io/bus_stops';\nconst LIST_FROM_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_from_list';\nconst AREA_FROM_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_from_area';\nconst LIST_TO_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_to_list';\nconst AREA_TO_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_to_area';\n\nconst fetchData = async (url, options, successHandler) => {\n  console.warn(options);\n  fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Something went wrong');\n    }\n  }).then(responseJson => {\n    successHandler && successHandler(responseJson);\n    console.warn(responseJson);\n    return;\n  }).catch(error => {\n    console.log('Error ' + error);\n    return;\n  });\n};\n\nexport const fetchBusStops = async successHandler => {\n  const result = await fetchData(BUS_STOPS_URL, {\n    \"method\": \"GET\"\n  }, successHandler);\n  return result;\n};\nexport const fetchFromList = (successHandler, filters) => {\n  const options = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": JSON.stringify(filters)\n  };\n  return fetchData(LIST_FROM_URL, options, successHandler);\n};\nexport const fetchFromArea = (successHandler, filters) => {\n  const options = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": JSON.stringify(filters)\n  };\n  return fetchData(AREA_FROM_URL, options, successHandler);\n};\nexport const fetchToList = (successHandler, filters) => {\n  const options = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": JSON.stringify(filters)\n  };\n  return fetchData(LIST_TO_URL, options, successHandler);\n};\nexport const fetchToArea = (successHandler, filters) => {\n  const options = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": JSON.stringify(filters)\n  };\n  return fetchData(AREA_TO_URL, options, successHandler);\n};","map":{"version":3,"sources":["/Users/alicjaniewiadomska/Work/publictransport-vis/src/api/apiService.js"],"names":["BUS_STOPS_URL","LIST_FROM_URL","AREA_FROM_URL","LIST_TO_URL","AREA_TO_URL","fetchData","url","options","successHandler","console","warn","fetch","then","response","ok","json","Error","responseJson","catch","error","log","fetchBusStops","result","fetchFromList","filters","JSON","stringify","fetchFromArea","fetchToList","fetchToArea"],"mappings":"AACA,MAAMA,aAAa,GAAG,gDAAtB;AACA,MAAMC,aAAa,GAAG,sDAAtB;AACA,MAAMC,aAAa,GAAG,sDAAtB;AACA,MAAMC,WAAW,GAAG,oDAApB;AACA,MAAMC,WAAW,GAAG,oDAApB;;AAIA,MAAMC,SAAS,GAAG,OAAOC,GAAP,EAAYC,OAAZ,EAAqBC,cAArB,KAAwC;AACtDC,EAAAA,OAAO,CAACC,IAAR,CAAaH,OAAb;AACAI,EAAAA,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CAAoBK,IAApB,CAA0BC,QAAD,IAAc;AACnC,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,KAFD,MAEO;AACH,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;AAAC,GALN,EAMKJ,IANL,CAMWK,YAAD,IAAkB;AACpBT,IAAAA,cAAc,IAAIA,cAAc,CAACS,YAAD,CAAhC;AACAR,IAAAA,OAAO,CAACC,IAAR,CAAaO,YAAb;AACA;AACH,GAVL,EAWKC,KAXL,CAWYC,KAAD,IAAW;AACdV,IAAAA,OAAO,CAACW,GAAR,CAAY,WAAWD,KAAvB;AACA;AACP,GAdD;AAeH,CAjBD;;AAmBA,OAAO,MAAME,aAAa,GAAG,MAAOb,cAAP,IAA0B;AACnD,QAAMc,MAAM,GAAG,MAAMjB,SAAS,CAACL,aAAD,EAAgB;AAAE,cAAU;AAAZ,GAAhB,EAAsCQ,cAAtC,CAA9B;AACA,SAAOc,MAAP;AACH,CAHM;AAKP,OAAO,MAAMC,aAAa,GAAG,CAACf,cAAD,EAAiBgB,OAAjB,KAA6B;AACtD,QAAMjB,OAAO,GAAG;AACZ,cAAU,MADE;AAEZ,eAAW;AACP,sBAAgB;AADT,KAFC;AAKZ,YAAQkB,IAAI,CAACC,SAAL,CAAeF,OAAf;AALI,GAAhB;AAOA,SAAOnB,SAAS,CAACJ,aAAD,EAAgBM,OAAhB,EAAyBC,cAAzB,CAAhB;AACH,CATM;AAWP,OAAO,MAAMmB,aAAa,GAAG,CAACnB,cAAD,EAAiBgB,OAAjB,KAA6B;AACtD,QAAMjB,OAAO,GAAG;AACZ,cAAU,MADE;AAEZ,eAAW;AACP,sBAAgB;AADT,KAFC;AAKZ,YAAQkB,IAAI,CAACC,SAAL,CAAeF,OAAf;AALI,GAAhB;AAOA,SAAOnB,SAAS,CAACH,aAAD,EAAgBK,OAAhB,EAAyBC,cAAzB,CAAhB;AACH,CATM;AAWP,OAAO,MAAMoB,WAAW,GAAG,CAACpB,cAAD,EAAiBgB,OAAjB,KAA6B;AACpD,QAAMjB,OAAO,GAAG;AACZ,cAAU,MADE;AAEZ,eAAW;AACP,sBAAgB;AADT,KAFC;AAKZ,YAAQkB,IAAI,CAACC,SAAL,CAAeF,OAAf;AALI,GAAhB;AAOA,SAAOnB,SAAS,CAACF,WAAD,EAAcI,OAAd,EAAuBC,cAAvB,CAAhB;AACH,CATM;AAWP,OAAO,MAAMqB,WAAW,GAAG,CAACrB,cAAD,EAAiBgB,OAAjB,KAA6B;AACpD,QAAMjB,OAAO,GAAG;AACZ,cAAU,MADE;AAEZ,eAAW;AACP,sBAAgB;AADT,KAFC;AAKZ,YAAQkB,IAAI,CAACC,SAAL,CAAeF,OAAf;AALI,GAAhB;AAOA,SAAOnB,SAAS,CAACD,WAAD,EAAcG,OAAd,EAAuBC,cAAvB,CAAhB;AACH,CATM","sourcesContent":["\nconst BUS_STOPS_URL = 'https://4dd3-149-156-124-16.ngrok.io/bus_stops';\nconst LIST_FROM_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_from_list';\nconst AREA_FROM_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_from_area';\nconst LIST_TO_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_to_list';\nconst AREA_TO_URL = 'https://4dd3-149-156-124-16.ngrok.io/going_to_area';\n\n\n\nconst fetchData = async (url, options, successHandler) => {\n    console.warn(options)\n    fetch(url, options).then((response) => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new Error('Something went wrong');\n        }})\n        .then((responseJson) => {\n            successHandler && successHandler(responseJson);\n            console.warn(responseJson)\n            return;\n        })\n        .catch((error) => {\n            console.log('Error ' + error);\n            return;\n    });\n}\n\nexport const fetchBusStops = async (successHandler) => {\n    const result = await fetchData(BUS_STOPS_URL, { \"method\": \"GET\", }, successHandler);\n    return result; \n}\n\nexport const fetchFromList = (successHandler, filters) => {\n    const options = { \n        \"method\": \"POST\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify(filters)\n    }\n    return fetchData(LIST_FROM_URL, options, successHandler)\n}\n\nexport const fetchFromArea = (successHandler, filters) => {\n    const options = { \n        \"method\": \"POST\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify(filters)\n    }\n    return fetchData(AREA_FROM_URL, options, successHandler)\n}\n\nexport const fetchToList = (successHandler, filters) => {\n    const options = { \n        \"method\": \"POST\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify(filters)\n    }\n    return fetchData(LIST_TO_URL, options, successHandler)\n}\n\nexport const fetchToArea = (successHandler, filters) => {\n    const options = { \n        \"method\": \"POST\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": JSON.stringify(filters)\n    }\n    return fetchData(AREA_TO_URL, options, successHandler)\n}\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { LIFECYCLE } from '../lifecycle/constants';\nimport { createProps } from './create-props';\nimport { PROP_SYMBOLS } from './constants';\nconst {\n  ASYNC_ORIGINAL,\n  ASYNC_RESOLVED,\n  ASYNC_DEFAULTS\n} = PROP_SYMBOLS;\nimport ComponentState from './component-state';\nconst defaultProps = {};\nlet counter = 0;\nexport default class Component {\n  constructor() {\n    this.props = createProps.apply(this, arguments);\n    this.id = this.props.id;\n    this.count = counter++;\n    this.lifecycle = LIFECYCLE.NO_STATE;\n    this.parent = null;\n    this.context = null;\n    this.state = null;\n    this.internalState = null;\n    Object.seal(this);\n  }\n\n  get root() {\n    let component = this;\n\n    while (component.parent) {\n      component = component.parent;\n    }\n\n    return component;\n  }\n\n  clone(newProps) {\n    const {\n      props\n    } = this;\n    const asyncProps = {};\n\n    for (const key in props[ASYNC_DEFAULTS]) {\n      if (key in props[ASYNC_RESOLVED]) {\n        asyncProps[key] = props[ASYNC_RESOLVED][key];\n      } else if (key in props[ASYNC_ORIGINAL]) {\n        asyncProps[key] = props[ASYNC_ORIGINAL][key];\n      }\n    }\n\n    return new this.constructor({ ...props,\n      ...asyncProps,\n      ...newProps\n    });\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  _initState() {\n    this.internalState = new ComponentState({});\n  }\n\n}\nComponent.componentName = 'Component';\nComponent.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  static resolve() {\n    for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n      accessors[_key] = arguments[_key];\n    }\n\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]);\n  }\n\n  constructor() {\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(accessor => this._assign(accessor));\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  _assign() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n\n}\nexport { DEFAULT_ACCESSOR_VALUES };","map":null,"metadata":{},"sourceType":"module"}
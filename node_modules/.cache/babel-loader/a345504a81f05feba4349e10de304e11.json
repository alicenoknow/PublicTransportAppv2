{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nimport { UPDATE_FILTERS, UPDATE_DIR, UPDATE_STOPS_TYPE, UPDATE_COORDS, DirectionType, StopsType } from \"./actionTypes\";\n\nfunction appReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_FILTERS:\n      {\n        const {\n          content\n        } = action.payload;\n        return { ...state,\n          filters: {\n            startDate: content.startDate,\n            endDate: content.endDate,\n            startTime: content.startTime,\n            endTime: content.endTime,\n            weekDays: content.weekDays\n          }\n        };\n      }\n\n    case UPDATE_DIR:\n      {\n        const {\n          content\n        } = action.payload;\n        return { ...state,\n          direction: content\n        };\n      }\n\n    case UPDATE_STOPS_TYPE:\n      {\n        const {\n          content\n        } = action.payload;\n        return { ...state,\n          stopsType: content\n        };\n      }\n\n    case UPDATE_COORDS:\n      {\n        const {\n          content\n        } = action.payload;\n        return { ...state,\n          chosenBusStops: content\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  app: {\n    filters: {\n      startDate: undefined,\n      endDate: undefined,\n      startTime: undefined,\n      endTime: undefined,\n      weekDays: [0, 1, 2, 3, 4, 5, 6]\n    },\n    direction: DirectionType.from,\n    stopsType: StopsType.all,\n    chosenBusStops: []\n  }\n};\nconst reducers = combineReducers({\n  app: appReducer\n});\nexport default createStore(reducers, initialState);","map":{"version":3,"sources":["/Users/alicjaniewiadomska/Work/publictransport-vis/src/redux/store.js"],"names":["createStore","combineReducers","UPDATE_FILTERS","UPDATE_DIR","UPDATE_STOPS_TYPE","UPDATE_COORDS","DirectionType","StopsType","appReducer","state","initialState","action","type","content","payload","filters","startDate","endDate","startTime","endTime","weekDays","direction","stopsType","chosenBusStops","app","undefined","from","all","reducers"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,iBAArC,EAAwDC,aAAxD,EAAuEC,aAAvE,EAAsFC,SAAtF,QAAuG,eAAvG;;AAGA,SAASC,UAAT,GAAgD;AAAA,MAA5BC,KAA4B,uEAAtBC,YAAsB;AAAA,MAARC,MAAQ;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,cAAL;AAAqB;AACjB,cAAM;AAAEW,UAAAA;AAAF,YAAcF,MAAM,CAACG,OAA3B;AACA,eAAO,EACH,GAAGL,KADA;AAEHM,UAAAA,OAAO,EAAE;AACLC,YAAAA,SAAS,EAAEH,OAAO,CAACG,SADd;AAELC,YAAAA,OAAO,EAAEJ,OAAO,CAACI,OAFZ;AAGLC,YAAAA,SAAS,EAAEL,OAAO,CAACK,SAHd;AAILC,YAAAA,OAAO,EAAEN,OAAO,CAACM,OAJZ;AAKLC,YAAAA,QAAQ,EAAEP,OAAO,CAACO;AALb;AAFN,SAAP;AASH;;AACD,SAAKjB,UAAL;AAAiB;AACb,cAAM;AAAEU,UAAAA;AAAF,YAAcF,MAAM,CAACG,OAA3B;AACA,eAAO,EACH,GAAGL,KADA;AAEHY,UAAAA,SAAS,EAAER;AAFR,SAAP;AAIH;;AACD,SAAKT,iBAAL;AAAwB;AACpB,cAAM;AAAES,UAAAA;AAAF,YAAcF,MAAM,CAACG,OAA3B;AACA,eAAO,EACH,GAAGL,KADA;AAEHa,UAAAA,SAAS,EAAET;AAFR,SAAP;AAIH;;AACD,SAAKR,aAAL;AAAoB;AAChB,cAAM;AAAEQ,UAAAA;AAAF,YAAcF,MAAM,CAACG,OAA3B;AACA,eAAO,EACH,GAAGL,KADA;AAEHc,UAAAA,cAAc,EAAEV;AAFb,SAAP;AAIH;;AACD;AACE,aAAOJ,KAAP;AAnCN;AAqCH;;AACD,MAAMC,YAAY,GAAG;AACjBc,EAAAA,GAAG,EAAE;AACGT,IAAAA,OAAO,EAAE;AACLC,MAAAA,SAAS,EAAES,SADN;AAELR,MAAAA,OAAO,EAAEQ,SAFJ;AAGLP,MAAAA,SAAS,EAAEO,SAHN;AAILN,MAAAA,OAAO,EAAEM,SAJJ;AAKLL,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AALL,KADZ;AAQGC,IAAAA,SAAS,EAAEf,aAAa,CAACoB,IAR5B;AASGJ,IAAAA,SAAS,EAAEf,SAAS,CAACoB,GATxB;AAUGJ,IAAAA,cAAc,EAAE;AAVnB;AADY,CAArB;AAgBA,MAAMK,QAAQ,GAAG3B,eAAe,CAAC;AAC7BuB,EAAAA,GAAG,EAAEhB;AADwB,CAAD,CAAhC;AAKA,eAAeR,WAAW,CACtB4B,QADsB,EAEtBlB,YAFsB,CAA1B","sourcesContent":["import { createStore, combineReducers } from 'redux';\nimport { UPDATE_FILTERS, UPDATE_DIR, UPDATE_STOPS_TYPE, UPDATE_COORDS, DirectionType, StopsType } from \"./actionTypes\";\n\n\nfunction appReducer(state=initialState, action) {\n    switch (action.type) {\n        case UPDATE_FILTERS: {\n            const { content } = action.payload;\n            return { \n                ...state,\n                filters: {\n                    startDate: content.startDate,\n                    endDate: content.endDate,\n                    startTime: content.startTime,\n                    endTime: content.endTime,\n                    weekDays: content.weekDays,\n            }};\n        }\n        case UPDATE_DIR: {\n            const { content } = action.payload;\n            return {\n                ...state, \n                direction: content,\n            }\n        }\n        case UPDATE_STOPS_TYPE: {\n            const { content } = action.payload;\n            return { \n                ...state,\n                stopsType: content,\n            }\n        }\n        case UPDATE_COORDS: {\n            const { content } = action.payload;\n            return { \n                ...state,\n                chosenBusStops: content,\n            }\n        }\n        default:\n          return state;\n      }\n}\nconst initialState = {\n    app: {\n            filters: {\n                startDate: undefined,\n                endDate: undefined,\n                startTime: undefined,\n                endTime: undefined,\n                weekDays: [0, 1, 2, 3, 4, 5, 6],\n            },\n            direction: DirectionType.from,\n            stopsType: StopsType.all, \n            chosenBusStops: [],\n    }\n};\n\n\nconst reducers = combineReducers({\n    app: appReducer\n});\n\n\nexport default createStore(\n    reducers,\n    initialState\n)\n"]},"metadata":{},"sourceType":"module"}
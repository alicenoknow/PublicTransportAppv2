{"ast":null,"code":"import { ClipSpace, setParameters, withParameters, clear } from '@luma.gl/core';\nimport Pass from './pass';\nexport default class ScreenPass extends Pass {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, props);\n    const {\n      module,\n      fs,\n      id\n    } = props;\n    this.model = new ClipSpace(gl, {\n      id,\n      fs,\n      modules: [module]\n    });\n  }\n\n  render(params) {\n    const gl = this.gl;\n    setParameters(gl, {\n      viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]\n    });\n    withParameters(gl, {\n      framebuffer: params.outputBuffer,\n      clearColor: [0, 0, 0, 0]\n    }, () => this._renderPass(gl, params));\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  _renderPass(gl, _ref) {\n    let {\n      inputBuffer,\n      outputBuffer\n    } = _ref;\n    clear(gl, {\n      color: true\n    });\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
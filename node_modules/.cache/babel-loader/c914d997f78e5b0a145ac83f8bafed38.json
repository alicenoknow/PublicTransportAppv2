{"ast":null,"code":"const _excluded = [\"className\", \"containerClassName\", \"disabled\", \"readOnly\", \"value\", \"min\", \"max\", \"incrementIcon\", \"decrementIcon\", \"placeholder\", \"autoFocus\", \"tabIndex\", \"parse\", \"name\", \"onChange\", \"messages\", \"format\", \"onKeyDown\", \"onKeyPress\", \"onKeyUp\", \"inputProps\", \"precision\", \"step\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport Button from './Button';\nimport { caretDown, caretUp } from './Icon';\nimport { useLocalizer } from './Localization';\nimport NumberInput from './NumberInput';\nimport Widget from './Widget';\nimport WidgetPicker from './WidgetPicker';\nimport * as CustomPropTypes from './PropTypes';\nimport useFocusManager from './useFocusManager';\nimport { notify } from './WidgetHelpers';\nimport useEventCallback from '@restart/hooks/useEventCallback'; // my tests in ie11/chrome/FF indicate that keyDown repeats\n// at about 35ms+/- 5ms after an initial 500ms delay. callback fires on the leading edge\n\nfunction createInterval(callback) {\n  let fn;\n  let id;\n\n  const cancel = () => clearTimeout(id);\n\n  id = window.setTimeout(fn = () => {\n    id = window.setTimeout(fn, 35);\n    callback(); //fire after everything in case the user cancels on the first call\n  }, 500);\n  return cancel;\n}\n\nfunction clamp(value, min, max) {\n  max = max == null ? Infinity : max;\n  min = min == null ? -Infinity : min;\n  if (value == null || value === '') return null;\n  return Math.max(Math.min(typeof value == 'string' ? parseInt(value) : value, max), min);\n}\n\nconst propTypes = {\n  /**\n   * @example ['valuePicker', [ [1, null] ]]\n   */\n  value: PropTypes.number,\n\n  /**\n   * @example ['onChangePicker', [ [1, null] ]]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The minimum number that the NumberPicker value.\n   * @example ['prop', ['min', 0]]\n   */\n  min: PropTypes.number,\n\n  /**\n   * The maximum number that the NumberPicker value.\n   *\n   * @example ['prop', ['max', 0]]\n   */\n  max: PropTypes.number,\n\n  /**\n   * Amount to increase or decrease value when using the spinner buttons.\n   *\n   * @example ['prop', ['step', 5]]\n   */\n  step: PropTypes.number,\n\n  /**\n   * Specify how precise the `value` should be when typing, incrementing, or decrementing the value.\n   * When empty, precision is parsed from the current `format` and culture.\n   */\n  precision: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n\n  /**\n   * A format string used to display the number value. Localizer dependent, read about [localization](localization) for more info.\n   *\n   * @example ['prop', { max: 1, min: -1 , defaultValue: 0.2585, format: \"{ style: 'percent' }\" }]\n   */\n  format: PropTypes.any,\n  parse: PropTypes.func,\n  incrementIcon: PropTypes.node,\n  decrementIcon: PropTypes.node,\n\n  /** @ignore */\n  tabIndex: PropTypes.any,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onKeyDown: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @example ['disabled', ['1']]\n   */\n  disabled: CustomPropTypes.disabled,\n\n  /**\n   * @example ['readOnly', ['1.5']]\n   */\n  readOnly: CustomPropTypes.disabled,\n\n  /** Adds a css class to the input container element. */\n  containerClassName: PropTypes.string,\n  inputProps: PropTypes.object,\n  messages: PropTypes.shape({\n    increment: PropTypes.string,\n    decrement: PropTypes.string\n  }),\n\n  /** @ignore */\n  localizer: PropTypes.object\n};\nconst defaultProps = {\n  incrementIcon: caretUp,\n  decrementIcon: caretDown,\n  min: -Infinity,\n  max: Infinity,\n  step: 1,\n  precision: 'auto'\n};\n/**\n * ---\n * localized: true\n * shortcuts:\n *   - { key: down arrow, label: decrement value }\n *   - { key: up arrow, label: increment value }\n *   - { key: home, label: set value to minimum value, if finite }\n *   - { key: end, label: set value to maximum value, if finite }\n * ---\n *\n * @public\n */\n\nfunction NumberPicker(uncontrolledProps) {\n  const _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    value: 'onChange'\n  }),\n        {\n    className,\n    containerClassName,\n    disabled,\n    readOnly,\n    value,\n    min,\n    max,\n    incrementIcon,\n    decrementIcon,\n    placeholder,\n    autoFocus,\n    tabIndex,\n    parse,\n    name,\n    onChange,\n    messages,\n    format,\n    onKeyDown,\n    onKeyPress,\n    onKeyUp,\n    inputProps,\n    precision,\n    step: pStep\n  } = _useUncontrolled,\n        elementProps = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  const localizer = useLocalizer(messages, {\n    number: format\n  });\n  const ref = useRef(null);\n  const inputRef = useRef(null);\n  const repeaterRef = useRef(null);\n  const [focusEvents, focused] = useFocusManager(ref, uncontrolledProps, {\n    willHandle(focused) {\n      if (focused) focus();\n    }\n\n  });\n  const handleMouseDown = useEventCallback((direction, event) => {\n    if (event) event.persist();\n    let method = direction === 'UP' ? increment : decrement;\n    let value = method(event),\n        atTop = direction === 'UP' && value === max,\n        atBottom = direction === 'DOWN' && value === min;\n    if (atTop || atBottom) handleMouseUp();else if (!repeaterRef.current) {\n      repeaterRef.current = createInterval(() => {\n        handleMouseDown(direction, event);\n      });\n    }\n  });\n  const handleMouseUp = useEventCallback(() => {\n    if (!repeaterRef.current) return;\n    repeaterRef.current();\n    repeaterRef.current = null;\n  });\n  const handleKeyDown = useEventCallback(event => {\n    if (readOnly) return;\n    let key = event.key;\n    notify(onKeyDown, [event]);\n    if (event.defaultPrevented) return;\n    if (key === 'End' && isFinite(max)) handleChange(max, event);else if (key === 'Home' && isFinite(min)) handleChange(min, event);else if (key === 'ArrowDown') {\n      event.preventDefault();\n      decrement(event);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      increment(event);\n    }\n  });\n\n  const handleChange = function (rawValue) {\n    let originalEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let nextValue = clamp(rawValue, min, max);\n    if (value !== nextValue) notify(onChange, [nextValue, {\n      rawValue,\n      originalEvent,\n      lastValue: value\n    }]);\n  };\n\n  function focus() {\n    var _inputRef$current;\n\n    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n  }\n\n  function increment(event) {\n    return step(pStep, event);\n  }\n\n  function decrement(event) {\n    return step(-pStep, event);\n  }\n\n  function step(amount, event) {\n    const nextValue = (value || 0) + amount;\n    let p = precision === 'auto' ? Math.max(getPrecision(value || 0), getPrecision(amount)) : precision;\n    handleChange(p != null ? parseFloat(nextValue.toFixed(p)) : nextValue, event);\n    return nextValue;\n  }\n\n  const clampedValue = clamp(value, min, max);\n  return /*#__PURE__*/React.createElement(Widget, _extends({}, elementProps, {\n    focused: focused,\n    disabled: disabled,\n    readOnly: readOnly,\n    onKeyDown: handleKeyDown\n  }, focusEvents, {\n    ref: ref,\n    className: cn(className, 'rw-number-picker')\n  }), /*#__PURE__*/React.createElement(WidgetPicker, {\n    className: containerClassName\n  }, /*#__PURE__*/React.createElement(NumberInput, _extends({}, inputProps, {\n    role: \"spinbutton\",\n    tabIndex: tabIndex,\n    value: clampedValue,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    editing: focused,\n    localizer: localizer,\n    parse: parse,\n    name: name,\n    min: min,\n    max: max,\n    disabled: disabled,\n    readOnly: readOnly,\n    onChange: handleChange,\n    onKeyPress: onKeyPress,\n    onKeyUp: onKeyUp,\n    innerRef: inputRef\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rw-input-addon rw-number-picker-spinners\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: incrementIcon,\n    className: \"rw-picker-btn\",\n    disabled: clampedValue === max || disabled || readOnly,\n    label: localizer.messages.increment({\n      value: clampedValue,\n      min,\n      max\n    }),\n    onMouseUp: () => handleMouseUp(),\n    onMouseDown: e => handleMouseDown('UP', e),\n    onMouseLeave: () => handleMouseUp()\n  }), /*#__PURE__*/React.createElement(Button, {\n    icon: decrementIcon,\n    className: \"rw-picker-btn\",\n    disabled: clampedValue === min || disabled || readOnly,\n    label: localizer.messages.decrement({\n      value: clampedValue,\n      min,\n      max\n    }),\n    onMouseUp: () => handleMouseUp(),\n    onMouseDown: e => handleMouseDown('DOWN', e),\n    onMouseLeave: () => handleMouseUp()\n  }))));\n}\n\n;\nNumberPicker.propTypes = propTypes;\nNumberPicker.defaultProps = defaultProps;\nexport default NumberPicker;\n\nfunction getPrecision(a) {\n  if (!isFinite(a)) return 0;\n  let e = 1;\n  let p = 0;\n\n  while (Math.round(a * e) / e !== a) {\n    e *= 10;\n    p++;\n  }\n\n  return p;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export async function* makeTextDecoderIterator(arrayBufferIterator) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const textDecoder = new TextDecoder(undefined, options);\n\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string' ? arrayBuffer : textDecoder.decode(arrayBuffer, {\n      stream: true\n    });\n  }\n}\nexport async function* makeTextEncoderIterator(textIterator) {\n  const textEncoder = new TextEncoder();\n\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\nexport async function* makeLineIterator(textIterator) {\n  let previous = '';\n\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\nexport async function* makeNumberedLineIterator(lineIterator) {\n  let counter = 1;\n\n  for await (const line of lineIterator) {\n    yield {\n      counter,\n      line\n    };\n    counter++;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alicjaniewiadomska/Work/publictransport-vis/src/components/sidebar/PanelContent.js\";\nimport React, { Component } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { connect } from \"react-redux\";\nimport { updateFilters } from \"../../redux/actions\";\nimport { fetchFromArea, fetchFromList, fetchToList, fetchToArea } from \"../../api/apiService\";\nimport DateRange from \"./DateRange\";\nimport TimeRange from \"./TimeRange\";\nimport WeekDayPicker from \"./WeekDayPicker\";\nimport BusStopsCheckBoxes from \"./BusStopsCheckBoxes\";\nimport DirectionTypeCheckBoxes from \"./DirectionTypeCheckBoxes\";\nimport { DirectionType, StopsType } from \"../../redux/actionTypes\";\n\nclass PanelContent extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      startDate: undefined,\n      endDate: undefined,\n      startTime: undefined,\n      endTime: undefined,\n      intervalStartTime: undefined,\n      intervalEndTime: undefined,\n      weekDays: []\n    };\n\n    this.onStartTimeChange = time => this.setState({\n      startTime: time\n    }, this.updateFilters);\n\n    this.onEndTimeChange = time => this.setState({\n      endTime: time\n    }, this.updateFilters);\n\n    this.onIntervalStartTimeChange = time => this.setState({\n      intervalStartTime: time\n    }, this.updateFilters);\n\n    this.onIntervalEndTimeChange = time => this.setState({\n      intervalEndTime: time\n    }, this.updateFilters);\n\n    this.onStartDateChange = date => this.setState({\n      startDate: date\n    }, this.updateFilters);\n\n    this.onEndDateChange = date => this.setState({\n      endDate: date\n    }, this.updateFilters);\n\n    this.onWeekDaysChange = weekDays => this.setState({\n      weekDays: weekDays\n    }, this.updateFilters);\n\n    this.updateFilters = () => {\n      const {\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        weekDays\n      } = this.state;\n      this.props.updateFilters({\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        weekDays\n      });\n    };\n\n    this.processData = () => {\n      const {\n        app,\n        setData,\n        setServerWait\n      } = this.props;\n      setServerWait();\n\n      if (app.direction === DirectionType.from) {\n        if (app.stopsType === StopsType.one || app.stopsType === StopsType.all) {\n          fetchFromList(data => setData(data), {\n            filters: {\n              startDate: app.filters.startDate,\n              endDate: app.filters.endDate,\n              startTime: app.filters.startTime,\n              endTime: app.filters.endTime,\n              weekDays: app.filters.weekDays\n            },\n            busStops: app.chosenBusStops.length === 0 ? undefined : [app.chosenBusStops]\n          });\n        } else {\n          fetchFromArea(data => setData(data), {\n            filters: {\n              startDate: app.filters.startDate,\n              endDate: app.filters.endDate,\n              startTime: app.filters.startTime,\n              endTime: app.filters.endTime,\n              weekDays: app.filters.weekDays\n            },\n            corners: app.chosenBusStops[0]\n          });\n        }\n      } else {\n        if (app.stopsType === StopsType.one || app.stopsType === StopsType.all) {\n          fetchToList(data => setData(data), {\n            filters: {\n              startDate: app.filters.startDate,\n              endDate: app.filters.endDate,\n              startTime: app.filters.startTime,\n              endTime: app.filters.endTime,\n              weekDays: app.filters.weekDays\n            },\n            busStops: app.chosenBusStops.length === 0 ? undefined : [app.chosenBusStops]\n          });\n        } else {\n          fetchToArea(data => setData(data), {\n            filters: {\n              startDate: app.filters.startDate,\n              endDate: app.filters.endDate,\n              startTime: app.filters.startTime,\n              endTime: app.filters.endTime,\n              weekDays: app.filters.weekDays\n            },\n            corners: app.chosenBusStops[0]\n          });\n        }\n      }\n    };\n\n    this.getFiltersSelection = () => {\n      return /*#__PURE__*/React.createElement(Collapsible, {\n        trigger: \"Filtruj\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Collapsible, {\n        className: \"NestedCollapsible\",\n        trigger: \"Wybierz godziny\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TimeRange, {\n        onStartTimeChange: this.onStartTimeChange,\n        onEndTimeChange: this.onEndTimeChange,\n        onIntervalStartTimeChange: this.onIntervalStartTimeChange,\n        onIntervalEndTimeChange: this.onIntervalEndTimeChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Collapsible, {\n        className: \"NestedCollapsible\",\n        trigger: \"Wybierz zakres dat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DateRange, {\n        onStartDateChange: this.onStartDateChange,\n        onEndDateChange: this.onEndDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Collapsible, {\n        className: \"NestedCollapsible\",\n        trigger: \"Wybierz dzie\\u0144 tygodnia\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(WeekDayPicker, {\n        onWeekDaysChange: this.onWeekDaysChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.getVisualizationSelection = () => {\n      return /*#__PURE__*/React.createElement(Collapsible, {\n        trigger: \"Wizualizuj\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Collapsible, {\n        className: \"NestedCollapsible\",\n        trigger: \"Wybierz przystanki\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(BusStopsCheckBoxes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Collapsible, {\n        className: \"NestedCollapsible\",\n        trigger: \"Wybierz rodzaj wizualizacji\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DirectionTypeCheckBoxes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      })));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, this.getFiltersSelection(), this.getVisualizationSelection(), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.processData,\n      className: \"confirmButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, \"Przetwarzaj dane\"));\n  }\n\n}\n\nconst mapStateToProps = state => state;\n\nconst dispatchToProps = {\n  updateFilters\n};\nexport default connect(mapStateToProps, dispatchToProps)(PanelContent);","map":{"version":3,"sources":["/Users/alicjaniewiadomska/Work/publictransport-vis/src/components/sidebar/PanelContent.js"],"names":["React","Component","Collapsible","connect","updateFilters","fetchFromArea","fetchFromList","fetchToList","fetchToArea","DateRange","TimeRange","WeekDayPicker","BusStopsCheckBoxes","DirectionTypeCheckBoxes","DirectionType","StopsType","PanelContent","state","startDate","undefined","endDate","startTime","endTime","intervalStartTime","intervalEndTime","weekDays","onStartTimeChange","time","setState","onEndTimeChange","onIntervalStartTimeChange","onIntervalEndTimeChange","onStartDateChange","date","onEndDateChange","onWeekDaysChange","props","processData","app","setData","setServerWait","direction","from","stopsType","one","all","data","filters","busStops","chosenBusStops","length","corners","getFiltersSelection","getVisualizationSelection","render","mapStateToProps","dispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { connect } from \"react-redux\";\nimport { updateFilters } from \"../../redux/actions\";\nimport {\n  fetchFromArea,\n  fetchFromList,\n  fetchToList,\n  fetchToArea,\n} from \"../../api/apiService\";\nimport DateRange from \"./DateRange\";\nimport TimeRange from \"./TimeRange\";\nimport WeekDayPicker from \"./WeekDayPicker\";\nimport BusStopsCheckBoxes from \"./BusStopsCheckBoxes\";\nimport DirectionTypeCheckBoxes from \"./DirectionTypeCheckBoxes\";\nimport { DirectionType, StopsType } from \"../../redux/actionTypes\";\n\nclass PanelContent extends Component {\n  state = {\n    startDate: undefined,\n    endDate: undefined,\n    startTime: undefined,\n    endTime: undefined,\n    intervalStartTime: undefined,\n    intervalEndTime: undefined,\n    weekDays: [],\n  };\n\n  onStartTimeChange = (time) =>\n    this.setState({ startTime: time }, this.updateFilters);\n  onEndTimeChange = (time) =>\n    this.setState({ endTime: time }, this.updateFilters);\n  onIntervalStartTimeChange = (time) =>\n    this.setState({ intervalStartTime: time }, this.updateFilters);\n  onIntervalEndTimeChange = (time) =>\n    this.setState({ intervalEndTime: time }, this.updateFilters);\n  onStartDateChange = (date) =>\n    this.setState({ startDate: date }, this.updateFilters);\n  onEndDateChange = (date) =>\n    this.setState({ endDate: date }, this.updateFilters);\n  onWeekDaysChange = (weekDays) =>\n    this.setState({ weekDays: weekDays }, this.updateFilters);\n  updateFilters = () => {\n    const { startDate, endDate, startTime, endTime, weekDays } = this.state;\n    this.props.updateFilters({\n      startDate,\n      endDate,\n      startTime,\n      endTime,\n      weekDays,\n    });\n  };\n\n  processData = () => {\n    const { app, setData, setServerWait } = this.props;\n    setServerWait();\n\n    if (app.direction === DirectionType.from) {\n      if (app.stopsType === StopsType.one || app.stopsType === StopsType.all) {\n        fetchFromList((data) => setData(data), {\n          filters: {\n            startDate: app.filters.startDate,\n            endDate: app.filters.endDate,\n            startTime: app.filters.startTime,\n            endTime: app.filters.endTime,\n            weekDays: app.filters.weekDays,\n          },\n          busStops:\n            app.chosenBusStops.length === 0 ? undefined : [app.chosenBusStops],\n        });\n      } else {\n        fetchFromArea((data) => setData(data), {\n          filters: {\n            startDate: app.filters.startDate,\n            endDate: app.filters.endDate,\n            startTime: app.filters.startTime,\n            endTime: app.filters.endTime,\n            weekDays: app.filters.weekDays,\n          },\n          corners: app.chosenBusStops[0],\n        });\n      }\n    } else {\n      if (app.stopsType === StopsType.one || app.stopsType === StopsType.all) {\n        fetchToList((data) => setData(data), {\n          filters: {\n            startDate: app.filters.startDate,\n            endDate: app.filters.endDate,\n            startTime: app.filters.startTime,\n            endTime: app.filters.endTime,\n            weekDays: app.filters.weekDays,\n          },\n          busStops:\n            app.chosenBusStops.length === 0 ? undefined : [app.chosenBusStops],\n        });\n      } else {\n        fetchToArea((data) => setData(data), {\n          filters: {\n            startDate: app.filters.startDate,\n            endDate: app.filters.endDate,\n            startTime: app.filters.startTime,\n            endTime: app.filters.endTime,\n            weekDays: app.filters.weekDays,\n          },\n          corners: app.chosenBusStops[0],\n        });\n      }\n    }\n  };\n\n  getFiltersSelection = () => {\n    return (\n      <Collapsible trigger=\"Filtruj\">\n        <Collapsible className={\"NestedCollapsible\"} trigger=\"Wybierz godziny\">\n          <TimeRange\n            onStartTimeChange={this.onStartTimeChange}\n            onEndTimeChange={this.onEndTimeChange}\n            onIntervalStartTimeChange={this.onIntervalStartTimeChange}\n            onIntervalEndTimeChange={this.onIntervalEndTimeChange}\n          />\n        </Collapsible>\n        <Collapsible\n          className={\"NestedCollapsible\"}\n          trigger=\"Wybierz zakres dat\"\n        >\n          <DateRange\n            onStartDateChange={this.onStartDateChange}\n            onEndDateChange={this.onEndDateChange}\n          />\n        </Collapsible>\n        <Collapsible\n          className={\"NestedCollapsible\"}\n          trigger=\"Wybierz dzień tygodnia\"\n        >\n          <WeekDayPicker onWeekDaysChange={this.onWeekDaysChange} />\n        </Collapsible>\n      </Collapsible>\n    );\n  };\n\n  getVisualizationSelection = () => {\n    return (\n      <Collapsible trigger=\"Wizualizuj\">\n        <Collapsible\n          className={\"NestedCollapsible\"}\n          trigger=\"Wybierz przystanki\"\n        >\n          <BusStopsCheckBoxes />\n        </Collapsible>\n        <Collapsible\n          className={\"NestedCollapsible\"}\n          trigger=\"Wybierz rodzaj wizualizacji\"\n        >\n          <DirectionTypeCheckBoxes />\n        </Collapsible>\n      </Collapsible>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.getFiltersSelection()}\n        {this.getVisualizationSelection()}\n        <button onClick={this.processData} className=\"confirmButton\">\n          Przetwarzaj dane\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\nconst dispatchToProps = { updateFilters };\n\nexport default connect(mapStateToProps, dispatchToProps)(PanelContent);\n"]},"metadata":{},"sourceType":"module"}
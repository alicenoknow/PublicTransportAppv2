{"ast":null,"code":"export function flatten(array) {\n  let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n\n  if (!Array.isArray(array)) {\n    return filter(array) ? [array] : [];\n  }\n\n  return flattenArray(array, filter, []);\n}\n\nfunction flattenArray(array, filter, result) {\n  let index = -1;\n\n  while (++index < array.length) {\n    const value = array[index];\n\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, result);\n    } else if (filter(value)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nexport function fillArray(_ref) {\n  let {\n    target,\n    source,\n    start = 0,\n    count = 1\n  } = _ref;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}","map":null,"metadata":{},"sourceType":"module"}
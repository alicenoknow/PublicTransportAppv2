{"ast":null,"code":"const _excluded = [\"children\", \"className\", \"dropUp\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cn from 'classnames';\nimport css from 'dom-helpers/css';\nimport getHeight from 'dom-helpers/height';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Transition, { ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nconst transitionClasses = {\n  [ENTERING]: 'rw-slide-transition-entering',\n  [EXITING]: 'rw-slide-transition-exiting',\n  [EXITED]: 'rw-slide-transition-exited'\n};\n\nclass SlideDownTransition extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.setContainerHeight = elem => {\n      elem.style.height = this.getHeight(elem) + 'px';\n    };\n\n    this.clearContainerHeight = elem => {\n      elem.style.height = '';\n    };\n\n    this.handleEntered = elem => {\n      this.clearContainerHeight(elem);\n      if (this.props.onEntered) this.props.onEntered();\n    };\n\n    this.handleEntering = () => {\n      if (this.props.onEntering) this.props.onEntering();\n    };\n\n    this.handleExit = elem => {\n      this.setContainerHeight(elem);\n      if (this.props.onExit) this.props.onExit();\n    };\n\n    this.handleExited = elem => {\n      this.clearContainerHeight(elem);\n      if (this.props.onExited) this.props.onExited();\n    };\n\n    this.handleTransitionEnd = (el, done) => {\n      transitionEnd(el.firstChild, done);\n    };\n  }\n\n  getHeight(container) {\n    let content = container.firstChild;\n    let margin = parseInt(css(content, 'margin-top'), 10) + parseInt(css(content, 'margin-bottom'), 10);\n    let old = container.style.display;\n    let height;\n    container.style.display = 'block';\n    height = (getHeight(content) || 0) + (isNaN(margin) ? 0 : margin);\n    container.style.display = old;\n    return height;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      children,\n      className,\n      dropUp\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      appear: true,\n      in: this.props.in,\n      onEnter: this.setContainerHeight,\n      onEntering: this.handleEntering,\n      onEntered: this.handleEntered,\n      onExit: this.handleExit,\n      onExited: this.handleExited,\n      addEndListener: this.handleTransitionEnd,\n      timeout: undefined\n      /*hack*/\n\n    }), (status, innerProps) => /*#__PURE__*/React.createElement(\"div\", _extends({}, innerProps, {\n      className: cn(className, dropUp && 'rw-dropup', transitionClasses[status])\n    }), /*#__PURE__*/React.cloneElement(children, {\n      className: cn('rw-slide-transition', children.props.className)\n    })));\n  }\n\n}\n\nSlideDownTransition.propTypes = {\n  in: PropTypes.bool.isRequired,\n  innerClassName: PropTypes.string,\n  dropUp: PropTypes.bool,\n  onExit: PropTypes.func,\n  onExited: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func\n};\nexport default SlideDownTransition;","map":null,"metadata":{},"sourceType":"module"}
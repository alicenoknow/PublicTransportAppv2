{"ast":null,"code":"export function makeStream(source, options) {\n  const iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(new Uint8Array(value));\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n\n    async cancel() {\n      var _iterator$return;\n\n      await (iterator === null || iterator === void 0 ? void 0 : (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n    }\n\n  }, {\n    highWaterMark: 2 ** 24,\n    ...options\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
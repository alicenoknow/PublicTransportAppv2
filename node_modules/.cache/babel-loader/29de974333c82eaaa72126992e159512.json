{"ast":null,"code":"const _excluded = [\"disabled\", \"readOnly\", \"placeholder\", \"innerRef\", \"min\", \"max\", \"localizer\", \"editing\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport activeElement from 'dom-helpers/activeElement';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Input from './Input';\nimport * as CustomPropTypes from './PropTypes';\n\nlet isSign = val => (val || '').trim() === '-';\n\nfunction isPaddedZeros(str, localizer) {\n  let localeChar = localizer.decimalCharacter();\n  let [_, decimals] = str.split(localeChar);\n  return !!(decimals && decimals.match(/0+$/));\n}\n\nfunction isAtDelimiter(str, localizer) {\n  let localeChar = localizer.decimalCharacter();\n  let lastIndex = str.length - 1;\n  if (str.length < 1) return false;\n  let char = str[lastIndex];\n  return !!(char === localeChar && str.indexOf(char) === lastIndex);\n}\n\nclass NumberPickerInput extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n\n    this.handleBlur = event => {\n      let str = this.state.stringValue;\n      let number = this.parseNumber(str); // if number is below the min\n      // we need to flush low values and decimal stops, onBlur means i'm done inputing\n\n      if (this.isIntermediateValue(number, str)) {\n        if (isNaN(number)) {\n          number = null;\n        }\n\n        this.props.onChange(number, event);\n      }\n    };\n\n    this.handleChange = event => {\n      let {\n        value,\n        onChange\n      } = this.props;\n      let stringValue = event.target.value,\n          numberValue = this.parseNumber(stringValue);\n      let isIntermediate = this.isIntermediateValue(numberValue, stringValue);\n\n      if (stringValue == null || stringValue.trim() === '') {\n        this.setStringValue('');\n        onChange(null, event);\n        return;\n      } // order here matters a lot\n\n\n      if (isIntermediate) {\n        this.setStringValue(stringValue);\n      } else if (numberValue !== value) {\n        onChange(numberValue, event);\n      } else if (stringValue != this.state.stringValue) {\n        this.setStringValue(stringValue);\n      }\n    };\n  }\n\n  getSnapshotBeforeUpdate(_ref) {\n    let {\n      editing\n    } = _ref;\n    return {\n      reselectText: !editing && this.props.editing && this.isSelectingAllText()\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let {\n      value,\n      editing,\n      localizer\n    } = nextProps;\n    let decimal = localizer.decimalCharacter();\n    const stringValue = value == null || isNaN(value) ? '' : editing ? ('' + value).replace('.', decimal) : localizer.formatNumber(value\n    /*, 'default'*/\n    );\n    if (prevState.lastValueFromProps !== stringValue) return {\n      stringValue,\n      lastValueFromProps: stringValue\n    };\n    return null;\n  }\n\n  componentDidUpdate(_, __, _ref2) {\n    let {\n      reselectText\n    } = _ref2;\n    if (reselectText) findDOMNode(this).select();\n  } // this intermediate state is for when one runs into\n  // the decimal or are typing the number\n\n\n  setStringValue(stringValue) {\n    this.setState({\n      stringValue\n    });\n  }\n\n  isIntermediateValue(num, str) {\n    let {\n      localizer,\n      min\n    } = this.props;\n    return !!(num < min || isSign(str) || isAtDelimiter(str, localizer) || isPaddedZeros(str, localizer));\n  }\n\n  isSelectingAllText() {\n    const node = canUseDOM && findDOMNode(this);\n    return canUseDOM && activeElement() === node && node.selectionStart === 0 && node.selectionEnd === node.value.length;\n  }\n\n  parseNumber(strVal) {\n    let {\n      localizer,\n      parse: userParse\n    } = this.props;\n    if (userParse) return userParse(strVal, localizer);\n    return localizer.parseNumber(strVal);\n  }\n\n  render() {\n    let _this$props = this.props,\n        {\n      disabled,\n      readOnly,\n      placeholder,\n      // eslint-disable-next-line react/prop-types\n      innerRef,\n      min,\n      max\n    } = _this$props,\n        props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    let value = this.state.stringValue;\n    return /*#__PURE__*/React.createElement(Input, _extends({}, props, {\n      ref: innerRef,\n      inputMode: \"numeric\",\n      className: \"rw-widget-input\",\n      onChange: this.handleChange,\n      onBlur: this.handleBlur,\n      \"aria-valuenow\": value\n      /*HACK*/\n      ,\n      \"aria-valuemin\": isFinite(min) ? min : undefined,\n      \"aria-valuemax\": isFinite(max) ? max : undefined,\n      disabled: disabled,\n      readOnly: readOnly,\n      placeholder: placeholder,\n      value: value\n    }));\n  }\n\n}\n\nNumberPickerInput.defaultProps = {\n  value: null,\n  editing: false\n};\nNumberPickerInput.propTypes = {\n  value: PropTypes.number,\n  editing: PropTypes.bool,\n  placeholder: PropTypes.string,\n  localizer: PropTypes.object.isRequired,\n  parse: PropTypes.func,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  disabled: CustomPropTypes.disabled,\n  readOnly: CustomPropTypes.disabled,\n  onChange: PropTypes.func.isRequired\n};\nexport default NumberPickerInput;","map":null,"metadata":{},"sourceType":"module"}
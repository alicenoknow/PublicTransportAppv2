{"ast":null,"code":"var _jsxFileName = \"/Users/alicjaniewiadomska/Work/publictransport-vis/src/map/CustomMap.js\";\nimport React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport ReactMapGL from \"react-map-gl\";\nimport { StopsType } from \"../redux/actionTypes\";\nimport { updateCoordinates } from \"../redux/actions\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport DeckGL from \"@deck.gl/react\";\nimport { ScatterplotLayer, ArcLayer } from \"@deck.gl/layers\";\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoiYWxpY2Vub2tub3ciLCJhIjoiY2txNDI3OXBnMGE2MDJwbXBvNXNic2N5eCJ9.JBfBgMVAkOOpQF7FMrpKSw\";\n\nclass CustomMap extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      viewport: {\n        latitude: 50.1021742,\n        longitude: 18.5462847,\n        zoom: 13\n      },\n      popUpCoordinates: [0.0, 0.0],\n      showPopUp: false,\n      popUpText: \"\"\n    };\n\n    this.onDrawUpdate = _ref => {\n      let {\n        features\n      } = _ref;\n      this.props.updateCoordinates(features[0].geometry.coordinates);\n    };\n\n    this.onClickUpdate = clickEvent => {\n      var _pointData$features;\n\n      const {\n        app,\n        updateCoordinates,\n        pointData\n      } = this.props;\n      const coords = [parseFloat(Number(clickEvent.lngLat.lng).toFixed(3)), parseFloat(Number(clickEvent.lngLat.lat).toFixed(3))];\n      const cut = (_pointData$features = pointData.features) === null || _pointData$features === void 0 ? void 0 : _pointData$features.map(item => [parseFloat(Number(item.geometry.coordinates[0]).toFixed(3)), parseFloat(Number(item.geometry.coordinates[1]).toFixed(3)), item.properties.id, item.properties.name]);\n      const filtered = cut.filter(item => item[0] === coords[0] && item[1] === coords[1]);\n      if (!filtered || !filtered[0]) return;\n\n      if (app.stopsType === StopsType.one) {\n        updateCoordinates(filtered[0][2]);\n      }\n\n      if (filtered[0].length < 4) {\n        return;\n      }\n\n      this.setState({\n        popUpCoordinates: {\n          lon: clickEvent.lngLat.lng,\n          lat: clickEvent.lngLat.lat\n        },\n        showPopUp: true,\n        popUpText: filtered[0][3]\n      });\n    };\n  }\n\n  render() {\n    const busStopsLayer = new ScatterplotLayer({\n      id: \"scatterplot-layer\",\n      data: [],\n      pickable: true,\n      opacity: 0.7,\n      stroked: true,\n      filled: true,\n      radiusScale: 6,\n      radiusMinPixels: 1,\n      radiusMaxPixels: 100,\n      lineWidthMinPixels: 1,\n      getPosition: d => d.coordinates,\n      getRadius: d => Math.sqrt(d.exits),\n      getFillColor: d => [255, 140, 0],\n      getLineColor: d => [0, 0, 0]\n    });\n    const connectionsLayer = null;\n    const layers = [busStopsLayer, connectionsLayer];\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      className: \"p-0 bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.viewport,\n      controller: true,\n      layers: layers,\n      getTooltip: _ref2 => {\n        let {\n          object\n        } = _ref2;\n        return object && `${object.name}`;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReactMapGL, {\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n      width: window.innerWidth,\n      height: window.innerHeight,\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => state;\n\nconst dispatchToProps = {\n  updateCoordinates\n};\nexport default connect(mapStateToProps, dispatchToProps)(CustomMap);\n/* <Map\n                    style=\"mapbox://styles/mapbox/streets-v9\"\n                    zoom={[13]}\n                    center={[18.5462847, 50.1021742,]}\n                    containerStyle={{\n                        height: window.innerHeight,\n                        width: window.innerWidth,\n                    }}>\n                    {renderHeatMapFrom && data && <LineLayer data={data} />}\n                    {renderBaseMap && <PointLayer data={pointData} onClickUpdate={this.onClickUpdate} />}\n                    {renderBaseMap && linesData.length !== 0 && <HeatmapLayer data={parseLinesToPoints(linesData)} />}\n                    {app.stopsType === StopsType.area && <DrawControl \n                            ref={(drawControl) => { this.drawControl = drawControl; }}\n                            defaultMode='draw_polygon'\n                            displayControlsDefault={false}\n                            onDrawCreate={this.onDrawUpdate} onDrawUpdate={this.onDrawUpdate}\n                            />}\n                    {showPopUp && <Popup coordinates={{lat: popUpCoordinates.lat, lon: popUpCoordinates.lon}}\n                                    onClick={() => this.setState({ showPopUp: false })}\n                                    style={{fontSize: 12}}\n                                    >\n                                    <h1>{popUpText}</h1>\n                    </Popup>}\n                </Map>; */","map":{"version":3,"sources":["/Users/alicjaniewiadomska/Work/publictransport-vis/src/map/CustomMap.js"],"names":["React","Component","Container","connect","ReactMapGL","StopsType","updateCoordinates","DeckGL","ScatterplotLayer","ArcLayer","MAPBOX_TOKEN","CustomMap","state","viewport","latitude","longitude","zoom","popUpCoordinates","showPopUp","popUpText","onDrawUpdate","features","props","geometry","coordinates","onClickUpdate","clickEvent","app","pointData","coords","parseFloat","Number","lngLat","lng","toFixed","lat","cut","map","item","properties","id","name","filtered","filter","stopsType","one","length","setState","lon","render","busStopsLayer","data","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","d","getRadius","Math","sqrt","exits","getFillColor","getLineColor","connectionsLayer","layers","object","window","innerWidth","innerHeight","mapStateToProps","dispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport ReactMapGL from \"react-map-gl\";\nimport { StopsType } from \"../redux/actionTypes\";\nimport { updateCoordinates } from \"../redux/actions\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport DeckGL from \"@deck.gl/react\";\nimport { ScatterplotLayer, ArcLayer } from \"@deck.gl/layers\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiYWxpY2Vub2tub3ciLCJhIjoiY2txNDI3OXBnMGE2MDJwbXBvNXNic2N5eCJ9.JBfBgMVAkOOpQF7FMrpKSw\";\n\nclass CustomMap extends Component {\n  state = {\n    viewport: {\n      latitude: 50.1021742,\n      longitude: 18.5462847,\n      zoom: 13,\n    },\n    popUpCoordinates: [0.0, 0.0],\n    showPopUp: false,\n    popUpText: \"\",\n  };\n  onDrawUpdate = ({ features }) => {\n    this.props.updateCoordinates(features[0].geometry.coordinates);\n  };\n\n  onClickUpdate = (clickEvent) => {\n    const { app, updateCoordinates, pointData } = this.props;\n    const coords = [\n      parseFloat(Number(clickEvent.lngLat.lng).toFixed(3)),\n      parseFloat(Number(clickEvent.lngLat.lat).toFixed(3)),\n    ];\n    const cut = pointData.features?.map((item) => [\n      parseFloat(Number(item.geometry.coordinates[0]).toFixed(3)),\n      parseFloat(Number(item.geometry.coordinates[1]).toFixed(3)),\n      item.properties.id,\n      item.properties.name,\n    ]);\n    const filtered = cut.filter(\n      (item) => item[0] === coords[0] && item[1] === coords[1]\n    );\n    if (!filtered || !filtered[0]) return;\n    if (app.stopsType === StopsType.one) {\n      updateCoordinates(filtered[0][2]);\n    }\n    if (filtered[0].length < 4) {\n      return;\n    }\n    this.setState({\n      popUpCoordinates: {\n        lon: clickEvent.lngLat.lng,\n        lat: clickEvent.lngLat.lat,\n      },\n      showPopUp: true,\n      popUpText: filtered[0][3],\n    });\n  };\n\n  render() {\n    const busStopsLayer = new ScatterplotLayer({\n      id: \"scatterplot-layer\",\n      data: [],\n      pickable: true,\n      opacity: 0.7,\n      stroked: true,\n      filled: true,\n      radiusScale: 6,\n      radiusMinPixels: 1,\n      radiusMaxPixels: 100,\n      lineWidthMinPixels: 1,\n      getPosition: (d) => d.coordinates,\n      getRadius: (d) => Math.sqrt(d.exits),\n      getFillColor: (d) => [255, 140, 0],\n      getLineColor: (d) => [0, 0, 0],\n    });\n    const connectionsLayer = null;\n    const layers = [busStopsLayer, connectionsLayer];\n\n    return (\n      <Container fluid className=\"p-0 bg-light\">\n        <DeckGL\n          initialViewState={this.state.viewport}\n          controller={true}\n          layers={layers}\n          getTooltip={({ object }) => object && `${object.name}`}\n        >\n          <ReactMapGL\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n            width={window.innerWidth}\n            height={window.innerHeight}\n            onViewportChange={(viewport) => this.setState({ viewport })}\n          />\n        </DeckGL>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\nconst dispatchToProps = { updateCoordinates };\n\nexport default connect(mapStateToProps, dispatchToProps)(CustomMap);\n\n/* <Map\n                    style=\"mapbox://styles/mapbox/streets-v9\"\n                    zoom={[13]}\n                    center={[18.5462847, 50.1021742,]}\n                    containerStyle={{\n                        height: window.innerHeight,\n                        width: window.innerWidth,\n                    }}>\n                    {renderHeatMapFrom && data && <LineLayer data={data} />}\n                    {renderBaseMap && <PointLayer data={pointData} onClickUpdate={this.onClickUpdate} />}\n                    {renderBaseMap && linesData.length !== 0 && <HeatmapLayer data={parseLinesToPoints(linesData)} />}\n                    {app.stopsType === StopsType.area && <DrawControl \n                            ref={(drawControl) => { this.drawControl = drawControl; }}\n                            defaultMode='draw_polygon'\n                            displayControlsDefault={false}\n                            onDrawCreate={this.onDrawUpdate} onDrawUpdate={this.onDrawUpdate}\n                            />}\n                    {showPopUp && <Popup coordinates={{lat: popUpCoordinates.lat, lon: popUpCoordinates.lon}}\n                                    onClick={() => this.setState({ showPopUp: false })}\n                                    style={{fontSize: 12}}\n                                    >\n                                    <h1>{popUpText}</h1>\n                    </Popup>}\n                </Map>; */\n"]},"metadata":{},"sourceType":"module"}
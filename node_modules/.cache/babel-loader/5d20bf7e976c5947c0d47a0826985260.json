{"ast":null,"code":"import { random } from '../utils/random';\nconst fs = `\\\nuniform float blurRadius;\nuniform float gradientRadius;\nuniform vec2 start;\nuniform vec2 end;\nuniform bool invert;\n\nvec2 tiltShift_getDelta(vec2 texSize) {\n  vec2 vector = normalize((end - start) * texSize);\n  return invert ? vec2(-vector.y, vector.x) : vector;\n}\n\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  vec2 normal = normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\n  float radius = smoothstep(0.0, 1.0,\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec4 sample = texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\n    sample.rgb *= sample.a;\n\n    color += sample * weight;\n    total += weight;\n  }\n\n  color = color / total;\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\nconst uniforms = {\n  blurRadius: {\n    value: 15,\n    min: 0,\n    max: 50\n  },\n  gradientRadius: {\n    value: 200,\n    min: 0,\n    max: 400\n  },\n  start: [0, 0],\n  end: [1, 1],\n  invert: {\n    value: false,\n    private: true\n  }\n};\nexport const tiltShift = {\n  name: 'tiltShift',\n  uniforms,\n  fs,\n  dependencies: [random],\n  passes: [{\n    sampler: true,\n    uniforms: {\n      invert: false\n    }\n  }, {\n    sampler: true,\n    uniforms: {\n      invert: true\n    }\n  }]\n};","map":null,"metadata":{},"sourceType":"module"}
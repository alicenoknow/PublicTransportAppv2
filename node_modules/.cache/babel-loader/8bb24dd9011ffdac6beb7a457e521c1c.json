{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport useEventCallback from './useEventCallback';\nimport useMounted from './useMounted';\n/**\n * useFocusManager provides a way to track and manage focus as it moves around\n * a container element. An `onChange` is fired when focus enters or leaves the\n * element, but not when it moves around inside the element, similar to\n * `pointerenter` and `pointerleave` DOM events.\n *\n * ```tsx\n * const [focused, setFocusState] = useState(false)\n *\n * const { onBlur, onFocus } = useFocusManager({\n *   onChange: nextFocused => setFocusState(nextFocused)\n * })\n *\n * return (\n *   <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n *     {String(focused)}\n *     <input />\n *     <input />\n *\n *     <button>A button</button>\n *   </div>\n * ```\n *\n */\n\nexport default function useFocusManager(opts) {\n  var isMounted = useMounted();\n  var lastFocused = useRef();\n  var handle = useRef();\n  var willHandle = useEventCallback(opts.willHandle);\n  var didHandle = useEventCallback(opts.didHandle);\n  var onChange = useEventCallback(opts.onChange);\n  var isDisabled = useEventCallback(opts.isDisabled);\n  var handleFocusChange = useCallback(function (focused, event) {\n    if (event && event.persist) event.persist();\n    if (willHandle && willHandle(focused, event) === false) return;\n    clearTimeout(handle.current);\n    handle.current = window.setTimeout(function () {\n      if (focused !== lastFocused.current) {\n        if (didHandle) didHandle(focused, event); // only fire a change when unmounted if its a blur\n\n        if (isMounted() || !focused) {\n          lastFocused.current = focused;\n          onChange && onChange(focused, event);\n        }\n      }\n    });\n  }, [isMounted, willHandle, didHandle, onChange, lastFocused]);\n  var handleBlur = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(false, event);\n  }, [handleFocusChange, isDisabled]);\n  var handleFocus = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(true, event);\n  }, [handleFocusChange, isDisabled]);\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
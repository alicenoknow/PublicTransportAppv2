{"ast":null,"code":"const _excluded = [\"className\", \"focusedItem\", \"disabled\", \"onChange\", \"value\", \"min\", \"max\", \"localizer\", \"renderDay\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cn from 'classnames';\nimport React from 'react';\nimport CalendarView from './CalendarView';\nimport { chunk } from './_';\nimport dates from './dates';\n\nfunction visibleDays(date, weekStart) {\n  let current = dates.startOf(dates.startOf(date, 'month'), 'week', weekStart);\n  let last = dates.endOf(dates.endOf(date, 'month'), 'week', weekStart);\n  let days = [];\n\n  while (dates.lte(current, last, 'day')) {\n    days.push(current);\n    current = dates.add(current, 1, 'day');\n  }\n\n  return days;\n}\n\nfunction MonthView(_ref) {\n  let {\n    className,\n    focusedItem,\n    disabled,\n    onChange,\n    value,\n    min,\n    max,\n    localizer,\n    renderDay\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  let month = visibleDays(focusedItem, localizer.firstOfWeek());\n  let rows = chunk(month, 7);\n  return /*#__PURE__*/React.createElement(CalendarView, _extends({}, props, {\n    focusedItem: focusedItem,\n    className: cn(className, 'rw-calendar-month')\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    role: \"rowgroup\",\n    className: \"rw-calendar-head\"\n  }, /*#__PURE__*/React.createElement(CalendarView.Row, {\n    className: \"rw-calendar-row\"\n  }, rows[0].map((date, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    role: \"columnheader\",\n    className: \"rw-head-cell\",\n    key: idx\n  }, localizer.formatDate(date, 'weekday'))))), /*#__PURE__*/React.createElement(CalendarView.Body, null, rows.map((row, rowIdx) => /*#__PURE__*/React.createElement(CalendarView.Row, {\n    key: rowIdx\n  }, row.map((date, colIdx) => {\n    let formattedDate = localizer.formatDate(date, 'dayOfMonth');\n    let label = localizer.formatDate(date, 'date');\n    return /*#__PURE__*/React.createElement(CalendarView.Cell, {\n      key: colIdx,\n      label: label,\n      date: date,\n      min: min,\n      max: max,\n      unit: \"day\",\n      viewUnit: \"month\",\n      onChange: onChange,\n      focusedItem: focusedItem,\n      selected: value,\n      disabled: disabled\n    }, renderDay ? renderDay({\n      date,\n      label: formattedDate\n    }) : formattedDate);\n  })))));\n}\n\nexport default MonthView;","map":null,"metadata":{},"sourceType":"module"}